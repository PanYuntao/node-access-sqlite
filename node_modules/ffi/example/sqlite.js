/**
 * Module dependencies.
 */

var fs = require('fs')
  , ref = require('ref')
  , ffi = require('../')
  , ArrayType = require('ref-array')
/**
 * The filename of the sqlite3 database to use.
 */

var dbName = process.argv[2] || 'test.sqlite3'

/**
 * "ref" types that the sqlite3 functions will use.
 */

var sqlite3 = 'void' // `sqlite3` is an "opaque" type, so we don't know its layout
  , sqlite3Ptr = ref.refType(sqlite3)
  , sqlite3PtrPtr = ref.refType(sqlite3Ptr)
  , sqlite3_exec_callback = 'pointer' // TODO: use ffi.Callback when #76 is implemented
  , stringPtr = ref.refType('string')
  , stringPtrPtr = ref.refType(stringPtr) //string **

// create FFI'd versions of the libsqlite3 function we're interested in
var SQLite3 = ffi.Library('libsqlite3', {
  'sqlite3_libversion': [ 'string', [ ] ],
  'sqlite3_open': [ 'int', [ 'string', sqlite3PtrPtr ] ],
  'sqlite3_close': [ 'int', [ sqlite3Ptr ] ],
  'sqlite3_changes': [ 'int', [ sqlite3Ptr ]],
  'sqlite3_exec': [ 'int', [ sqlite3Ptr, 'string', sqlite3_exec_callback, 'void *', stringPtr ] ],
  'sqlite3_get_table': ['int',[sqlite3Ptr,'string',stringPtrPtr,'int *','int *',stringPtr] ]
})

// print out the "libsqlite3" version number
console.log('Using libsqlite3 version %j...', SQLite3.sqlite3_libversion())

// create a storage area for the db pointer SQLite3 gives us
var db = ref.alloc(sqlite3PtrPtr)

// open the database object
console.log('Opening %j...', dbName)
SQLite3.sqlite3_open(dbName, db)

// we don't care about the `sqlite **`, but rather the `sqlite *` that it's
// pointing to, so we must deref()
db = db.deref()

// execute a couple SQL queries to create the table "foo" and ensure it's empty
console.log('Creating and/or clearing foo table...')
SQLite3.sqlite3_exec(db, 'CREATE TABLE foo (name VARCHAR(50),age int,note VARCHAR(1000));', null, null, null)
SQLite3.sqlite3_exec(db, 'DELETE FROM foo;', null, null, null)

// execute a few INSERT queries into the "foo" table
console.log('Inserting bar 1000 times...')
for (var i = 0; i < 1000; i++) {
  SQLite3.sqlite3_exec(db, 'INSERT INTO foo VALUES(\'baz' + i + '\',' + i + ',\'Test long long long long long long long string' + i + '\');', null, null, null)
}

// we can also run queries asynchronously on the thread pool. this is good for
// when you expect a query to take a long time. when running SELECT queries, you
// pass a callback function that gets invoked for each record found. since we're
// running asynchronously, you pass a second callback function that will be
// invoked when the query has completed.
/*
var rowCount = 0
var callback = ffi.Callback('int', ['void *', 'int', stringPtr, stringPtr], function (tmp, cols, argv, colv) {
  var obj = {}

  for (var i = 0; i < cols; i++) {
    var colName = colv.deref()
    var colData = argv.deref()
    obj[colName] = colData
  }

  console.log('Row: %j', obj)
  rowCount++

  return 0
})

var b = new Buffer('test')
SQLite3.sqlite3_exec.async(db, 'SELECT * FROM foo;', callback, b, null, function (err, ret) {
  if (err) throw err
  console.log('Total Rows: %j', rowCount)
  console.log('Changes: %j', SQLite3.sqlite3_changes(db))
  console.log('Closing...')
  SQLite3.sqlite3_close(db)
 // fs.unlinkSync(dbName)
 // fin = true
})
*/



/*Test sqlite3_get_table method */
  console.log("show the table data with sqlite3_get_table ... ");
  var tmptable = [];
  //sqlite返回结果集buffer
  var dbresult = ref.alloc(stringPtrPtr)
  //row count
  var nrow = ref.alloc('int')
  //column count
  var ncol = ref.alloc('int')
  var ires =SQLite3.sqlite3_get_table(db,"select * from foo; ",dbresult,nrow,ncol,null)
  var irow=nrow.deref()
  var icol=ncol.deref()
  if(ires!=0)
  {
      console.log("query error，code: "+ires)
  }
  if(irow>0 && icol>0)
  {
      //结果集buffer解析第一维数组
      var stringptrArray = ArrayType(stringPtr)
      var dataarray = stringptrArray.untilZeros(dbresult.deref())
      var rowbuffer =dataarray['buffer'];
      //解析第二维数组（数据格式为前ncol为列名称，ncol+1开始为数据，数组末尾包含函数及相关对象）
      var string =ref.types.CString
      var stringArray =ArrayType(string)
      var datarow =stringArray.untilZeros(rowbuffer)
      //columnname array
      var colarray = [];
      for(var i=0; i<icol ; i++)
      {
          colarray.push(datarow[i])
      }
      var rcol =icol;//数组第icol元素开始为数据元素
      //clone the row data
      for(var j=0;j<irow;j++)
      {
          var objrow={}
          for(var k=0; k<icol ; k++)
          {
              if(datarow[rcol])
              {
                  objrow[colarray[k]]=datarow[rcol];
              }
              else
              {
                  objrow[colarray[k]]=datarow[rcol];
              }
              rcol++;
              }
              tmptable.push(objrow)
     }
  }
     console.log(tmptable);
     SQLite3.sqlite3_close(db);













